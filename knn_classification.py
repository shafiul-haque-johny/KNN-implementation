# -*- coding: utf-8 -*-
"""KNN-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https:.........

# **K Nearest naigabours**
"""

from google.colab import drive
drive.mount('/content/drive')

from numpy import genfromtxt
import random
data_path='/set your path here/iris.csv'
my_data=genfromtxt(data_path,delimiter=',')

#dataset_preparation
Train_set=[]
Test_set=[]
Val_set=[]
for S in my_data:
  R=random.uniform(0,1)
  if(R>=0 and R<=0.7):
    Train_set.append(S)
  elif(R>0.7 and R<=0.85):
    Test_set.append(S)
  else:
    Val_set.append(S)  
print(len(Train_set))
print(len(Test_set))
print(len(Val_set))

"""# **Classification**"""

#import operator
import math
import collections
k =12
correct = 0
L = {}
maximum=[]
#finding ecudian distance
for V in Val_set:
 for T in Train_set:
    d=0
    for i in range(len(V)-1):
      d+=(V[i]-T[i])**2
    d=math.sqrt(d)
    L[d]=T
#sorting
dictionary_items = L.items()
sorted_L = sorted(dictionary_items)
sorted_L=collections.OrderedDict(sorted_L)
#print(sorted_L)

#taking first k samples
count = 0
K_samples = {}
for key,value in sorted_L.items():
   if(count<=k-1):
    K_samples[key]=value
    count+=1
    #print(K_samples)

#finding major class   
major_class={}
 
for key,value in K_samples.items():
    if(value[-1] in major_class):
     major_class[value[-1]]+=1
     #appending maximum list
     values=max(major_class,key=major_class.get)
     maximum.append(values) 
    else:
      major_class[value[-1]]=0
      major_class[value[-1]]+=1
      #appending maximum list
      values=max(major_class,key=major_class.get)
      maximum.append(values)   
 
#finding maximum
maximum=max(set(maximum),key=maximum.count)
for V in Val_set:
  if(V[-1]==maximum):
   correct+=1

Acurracy=(correct/len(Val_set))*100
print(Acurracy)

k = 10
correct = 0
L = {}
maximum=[]
#finding ecudian distance
for t in Test_set:
 for T in Train_set:
    d=0
    for i in range(len(t)-1):
      d+=(t[i]-T[i])**2
    d=math.sqrt(d)
    L[d]=list(T)
#sorting
 dictionary_items = L.items()
 sorted_L = sorted(dictionary_items)
 sorted_L=collections.OrderedDict(sorted_L)
 

#taking first k samples
 count = 0
 K_samples = {}
 for k,v in sorted_L.items():
   if(count<=k-1):
    K_samples[k]=v
  
    count+=1
#finding major class   
 major_class={}
 
 for key,value in K_samples.items():
    if(value[-1] in major_class):
     major_class[value[-1]]+=1
     #appending maximum list
     values=max(major_class,key=major_class.get)
     maximum.append(values) 
    else:
      major_class[value[-1]]=0
      major_class[value[-1]]+=1
      #appending maximum list
      values=max(major_class,key=major_class.get)
      maximum.append(values)
 

#finding maximum
maximum=max(set(maximum),key=maximum.count)
#finding total correct
for t in Test_set:
  if(t[-1]==maximum):
   correct+=1

#finding accuracy
Acurracy=(correct/len(Test_set))*100
print(Acurracy)

