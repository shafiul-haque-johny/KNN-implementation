# -*- coding: utf-8 -*-
"""KNN-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https:.......

# **K Nearest naigabours**
"""

from google.colab import drive
drive.mount('/content/drive')

from numpy import genfromtxt
import random
data_path='set your path here /housing.csv'
my_data=genfromtxt(data_path,delimiter=',')

#dataset_preparation
Train_set=[]
Test_set=[]
Val_set=[]
for S in my_data:
  R=random.uniform(0,1)
  if(R>=0 and R<=0.7):
    Train_set.append(S)
  elif(R>0.7 and R<=0.85):
    Test_set.append(S)
  else:
    Val_set.append(S)  
print(len(Train_set))
print(len(Test_set))
print(len(Val_set))

"""# **Regrassion**"""

import math
k = 5
correct = 0
L = {}
maximum=[]
count=0
total_value=0
#finding Euclidean distance
for V in Val_set:
 for T in Train_set:
    d=0
    for i in range(len(V)-1):
      d+=(V[i]-T[i])**2
    d=math.sqrt(d)
    L[d]=T[-1]
#sorting
dictionary_items = L.items()
sorted_L = sorted(dictionary_items)
sorted_L=collections.OrderedDict(sorted_L)
#print(sorted_L)

#taking first k samples
for key,values in sorted_L.items():
   if(count<=k):
    total_value+=L[key]
    count+=1
   else:
    break
#taking average output    
avg_val=total_value/k
#finding the error
error=0
for V in Val_set:
  error+=(V[-1]-avg_val)**2  
Mean_Squared_Error = (error/len(Val_set))
print(Mean_Squared_Error)

import math
k = 5
correct = 0
L = {}
maximum=[]
count=0
total_value=0
#finding Euclidean distance
for t in Test_set:
 for T in Train_set:
    d=0
    for i in range(len(t)-1):
      d+=(t[i]-T[i])**2
    d=math.sqrt(d)
    L[d]=T[-1]
#sorting
dictionary_items = L.items()
sorted_L = sorted(dictionary_items)
sorted_L=collections.OrderedDict(sorted_L)
#print(sorted_L)

#taking first k samples
for key,values in sorted_L.items():
   if(count<=k):
    total_value+=L[key]
    count+=1
   else:
    break
#taking average output    
avg_val=total_value/k
#finding the error
error=0
for t in Test_set:
  error+=(t[-1]-avg_val)**2  
Mean_Squared_Error=(error/len(Test_set))
print(Mean_Squared_Error)